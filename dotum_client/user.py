from http import HTTPStatus

import requests
import streamlit as st

from settings import BASE_URL

st.set_page_config(
    page_title='Dotum - Usu치rio',
    page_icon='游뗵',
    initial_sidebar_state='expanded',
)

st.sidebar.header('Usu치rio')
st.markdown('# Endpoints para gerenciar usu치rios')

st.write(
    'Esta rota permite gerenciar usu치rios, incluindo cria칞칚o, edi칞칚o e exclus칚o de contas.'
)

st.markdown('## Funcionalidades')
st.write("""
- **Cria칞칚o de Usu치rio**: Permite adicionar novos usu치rios ao sistema.
- **Edi칞칚o de Usu치rio**: Possibilita modificar detalhes de usu치rios existentes.
- **Exclus칚o de Usu치rio**: Remove usu치rios do sistema.
""")

st.divider()

# Criar Usu치rio

st.markdown('## Criar usu치rio')
st.write('Use este endpoint para registrar um novo usu치rio no sistema.')

st.markdown("""
- Endpoint: `/user`
- M칠todo: `POST`
""")

st.markdown('#### Corpo da requisi칞칚o')

st.code(
    """
{
  "username": "string",
  "email": "user@example.com",
  "first_name": "string",
  "last_name": "string",
  "password": "string"
}
""",
    language='json',
)

st.markdown('### Experimente')

with st.form('create_user_form'):
    username = st.text_input('Nome de usu치rio')
    email = st.text_input('Email', placeholder='user@example.com')
    first_name = st.text_input('Nome')
    last_name = st.text_input('Sobrenome')
    password = st.text_input('Senha', type='password')

    submitted = st.form_submit_button('Registrar')

    if submitted:
        if username and email and first_name and last_name and password:
            with st.spinner('Registrando usu치rio...'):
                response = requests.post(
                    f'{BASE_URL}/user/',
                    json={
                        'username': username,
                        'email': email,
                        'first_name': first_name,
                        'last_name': last_name,
                        'password': password,
                    },
                )
            if response.status_code == HTTPStatus.CREATED:
                st.success('Usu치rio criado com sucesso!')
                st.balloons()
            else:
                st.error(f'Erro ao criar usu치rio: {response.json()["detail"]}')
        else:
            st.warning('Por favor, preencha todos os campos.')

st.divider()

# Atualizar Usu치rio

st.markdown('## Atualizar usu치rio')
st.write(
    'Use este endpoint para atualizar os dados de um usu치rio registrado no sistema.'
)

st.markdown("""
- Endpoint: `/user/{user_id}`
- M칠todo: `PATCH`
""")

st.markdown('#### Corpo da requisi칞칚o')

st.code(
    """
{
  "username": "string",
  "email": "user@example.com",
  "first_name": "string",
  "last_name": "string",
  "password": "string"
}
""",
    language='json',
)

st.markdown('### Experimente :material/key:')

with st.form('update_user_form'):
    user_id = st.number_input('ID do usu치rio', value=1, min_value=1)
    username = st.text_input('Nome de usu치rio')
    email = st.text_input('Email', placeholder='user@example.com')
    first_name = st.text_input('Nome')
    last_name = st.text_input('Sobrenome')
    password = st.text_input('Senha', type='password')

    submitted = st.form_submit_button('Atualizar')

    if submitted:
        if 'token' in st.session_state:
            if not any([username, email, first_name, last_name, password]):
                st.warning('Por favor, insira algum dado para atualiza칞칚o.')
            else:
                json = {
                    'username': username,
                    'email': email,
                    'first_name': first_name,
                    'last_name': last_name,
                    'password': password,
                }

                # Remove campos vazios
                json = {k: v for k, v in json.items() if v}
                headers = {'Authorization': f'Bearer {st.session_state.token}'}

                with st.spinner('Atualizando usu치rio...'):
                    response = requests.patch(
                        f'{BASE_URL}/user/{user_id}',
                        json=json,
                        headers=headers,
                    )
                if response.status_code == HTTPStatus.OK:
                    st.success('Usu치rio atualizado com sucesso!')
                else:
                    st.error(
                        f'Erro ao atualizar usu치rio: {response.json()["detail"]}'
                    )
        else:
            st.warning('Esse endpoint requer autentica칞칚o!')

st.divider()

# Deletar Usu치rio

st.markdown('## Deletar usu치rio')
st.write('Use este endpoint para excluir um usu치rio registrado no sistema.')

st.markdown("""
- Endpoint: `/user/{user_id}`
- M칠todo: `DELETE`
""")

st.markdown('### Experimente')

with st.form('delete_user_form'):
    user_id = st.number_input('ID do usu치rio', value=1, min_value=1)

    submitted = st.form_submit_button('Deletar')

    if submitted:
        if 'token' in st.session_state:
            headers = {'Authorization': f'Bearer {st.session_state.token}'}

            with st.spinner('Deletando usu치rio...'):
                response = requests.delete(
                    f'{BASE_URL}/user/{user_id}',
                    headers=headers,
                )
            if response.status_code == HTTPStatus.OK:
                st.success('Usu치rio deletado com sucesso!')
            else:
                st.error(
                    f'Erro ao deletar usu치rio: {response.json()["detail"]}'
                )
        else:
            st.warning('Esse endpoint requer autentica칞칚o!')
